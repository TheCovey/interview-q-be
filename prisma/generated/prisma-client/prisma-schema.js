module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAvailability {
  count: Int!
}

type AggregateBooking {
  count: Int!
}

type AggregateIndustry {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateReport {
  count: Int!
}

type AggregateResponse {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type Availability {
  id: ID!
  hour: Int!
  minute: Int!
  coach: String!
  bookingID: String
  year: Int!
  month: Int!
  day: Int!
  uniquecheck: String!
  isOpen: Boolean!
  recurring: Boolean!
}

type AvailabilityConnection {
  pageInfo: PageInfo!
  edges: [AvailabilityEdge]!
  aggregate: AggregateAvailability!
}

input AvailabilityCreateInput {
  id: ID
  hour: Int!
  minute: Int!
  coach: String!
  bookingID: String
  year: Int!
  month: Int!
  day: Int!
  uniquecheck: String!
  isOpen: Boolean!
  recurring: Boolean!
}

input AvailabilityCreateManyInput {
  create: [AvailabilityCreateInput!]
  connect: [AvailabilityWhereUniqueInput!]
}

type AvailabilityEdge {
  node: Availability!
  cursor: String!
}

enum AvailabilityOrderByInput {
  id_ASC
  id_DESC
  hour_ASC
  hour_DESC
  minute_ASC
  minute_DESC
  coach_ASC
  coach_DESC
  bookingID_ASC
  bookingID_DESC
  year_ASC
  year_DESC
  month_ASC
  month_DESC
  day_ASC
  day_DESC
  uniquecheck_ASC
  uniquecheck_DESC
  isOpen_ASC
  isOpen_DESC
  recurring_ASC
  recurring_DESC
}

type AvailabilityPreviousValues {
  id: ID!
  hour: Int!
  minute: Int!
  coach: String!
  bookingID: String
  year: Int!
  month: Int!
  day: Int!
  uniquecheck: String!
  isOpen: Boolean!
  recurring: Boolean!
}

input AvailabilityScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  hour: Int
  hour_not: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  hour_lt: Int
  hour_lte: Int
  hour_gt: Int
  hour_gte: Int
  minute: Int
  minute_not: Int
  minute_in: [Int!]
  minute_not_in: [Int!]
  minute_lt: Int
  minute_lte: Int
  minute_gt: Int
  minute_gte: Int
  coach: String
  coach_not: String
  coach_in: [String!]
  coach_not_in: [String!]
  coach_lt: String
  coach_lte: String
  coach_gt: String
  coach_gte: String
  coach_contains: String
  coach_not_contains: String
  coach_starts_with: String
  coach_not_starts_with: String
  coach_ends_with: String
  coach_not_ends_with: String
  bookingID: String
  bookingID_not: String
  bookingID_in: [String!]
  bookingID_not_in: [String!]
  bookingID_lt: String
  bookingID_lte: String
  bookingID_gt: String
  bookingID_gte: String
  bookingID_contains: String
  bookingID_not_contains: String
  bookingID_starts_with: String
  bookingID_not_starts_with: String
  bookingID_ends_with: String
  bookingID_not_ends_with: String
  year: Int
  year_not: Int
  year_in: [Int!]
  year_not_in: [Int!]
  year_lt: Int
  year_lte: Int
  year_gt: Int
  year_gte: Int
  month: Int
  month_not: Int
  month_in: [Int!]
  month_not_in: [Int!]
  month_lt: Int
  month_lte: Int
  month_gt: Int
  month_gte: Int
  day: Int
  day_not: Int
  day_in: [Int!]
  day_not_in: [Int!]
  day_lt: Int
  day_lte: Int
  day_gt: Int
  day_gte: Int
  uniquecheck: String
  uniquecheck_not: String
  uniquecheck_in: [String!]
  uniquecheck_not_in: [String!]
  uniquecheck_lt: String
  uniquecheck_lte: String
  uniquecheck_gt: String
  uniquecheck_gte: String
  uniquecheck_contains: String
  uniquecheck_not_contains: String
  uniquecheck_starts_with: String
  uniquecheck_not_starts_with: String
  uniquecheck_ends_with: String
  uniquecheck_not_ends_with: String
  isOpen: Boolean
  isOpen_not: Boolean
  recurring: Boolean
  recurring_not: Boolean
  AND: [AvailabilityScalarWhereInput!]
  OR: [AvailabilityScalarWhereInput!]
  NOT: [AvailabilityScalarWhereInput!]
}

type AvailabilitySubscriptionPayload {
  mutation: MutationType!
  node: Availability
  updatedFields: [String!]
  previousValues: AvailabilityPreviousValues
}

input AvailabilitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AvailabilityWhereInput
  AND: [AvailabilitySubscriptionWhereInput!]
  OR: [AvailabilitySubscriptionWhereInput!]
  NOT: [AvailabilitySubscriptionWhereInput!]
}

input AvailabilityUpdateDataInput {
  hour: Int
  minute: Int
  coach: String
  bookingID: String
  year: Int
  month: Int
  day: Int
  uniquecheck: String
  isOpen: Boolean
  recurring: Boolean
}

input AvailabilityUpdateInput {
  hour: Int
  minute: Int
  coach: String
  bookingID: String
  year: Int
  month: Int
  day: Int
  uniquecheck: String
  isOpen: Boolean
  recurring: Boolean
}

input AvailabilityUpdateManyDataInput {
  hour: Int
  minute: Int
  coach: String
  bookingID: String
  year: Int
  month: Int
  day: Int
  uniquecheck: String
  isOpen: Boolean
  recurring: Boolean
}

input AvailabilityUpdateManyInput {
  create: [AvailabilityCreateInput!]
  update: [AvailabilityUpdateWithWhereUniqueNestedInput!]
  upsert: [AvailabilityUpsertWithWhereUniqueNestedInput!]
  delete: [AvailabilityWhereUniqueInput!]
  connect: [AvailabilityWhereUniqueInput!]
  set: [AvailabilityWhereUniqueInput!]
  disconnect: [AvailabilityWhereUniqueInput!]
  deleteMany: [AvailabilityScalarWhereInput!]
  updateMany: [AvailabilityUpdateManyWithWhereNestedInput!]
}

input AvailabilityUpdateManyMutationInput {
  hour: Int
  minute: Int
  coach: String
  bookingID: String
  year: Int
  month: Int
  day: Int
  uniquecheck: String
  isOpen: Boolean
  recurring: Boolean
}

input AvailabilityUpdateManyWithWhereNestedInput {
  where: AvailabilityScalarWhereInput!
  data: AvailabilityUpdateManyDataInput!
}

input AvailabilityUpdateWithWhereUniqueNestedInput {
  where: AvailabilityWhereUniqueInput!
  data: AvailabilityUpdateDataInput!
}

input AvailabilityUpsertWithWhereUniqueNestedInput {
  where: AvailabilityWhereUniqueInput!
  update: AvailabilityUpdateDataInput!
  create: AvailabilityCreateInput!
}

input AvailabilityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  hour: Int
  hour_not: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  hour_lt: Int
  hour_lte: Int
  hour_gt: Int
  hour_gte: Int
  minute: Int
  minute_not: Int
  minute_in: [Int!]
  minute_not_in: [Int!]
  minute_lt: Int
  minute_lte: Int
  minute_gt: Int
  minute_gte: Int
  coach: String
  coach_not: String
  coach_in: [String!]
  coach_not_in: [String!]
  coach_lt: String
  coach_lte: String
  coach_gt: String
  coach_gte: String
  coach_contains: String
  coach_not_contains: String
  coach_starts_with: String
  coach_not_starts_with: String
  coach_ends_with: String
  coach_not_ends_with: String
  bookingID: String
  bookingID_not: String
  bookingID_in: [String!]
  bookingID_not_in: [String!]
  bookingID_lt: String
  bookingID_lte: String
  bookingID_gt: String
  bookingID_gte: String
  bookingID_contains: String
  bookingID_not_contains: String
  bookingID_starts_with: String
  bookingID_not_starts_with: String
  bookingID_ends_with: String
  bookingID_not_ends_with: String
  year: Int
  year_not: Int
  year_in: [Int!]
  year_not_in: [Int!]
  year_lt: Int
  year_lte: Int
  year_gt: Int
  year_gte: Int
  month: Int
  month_not: Int
  month_in: [Int!]
  month_not_in: [Int!]
  month_lt: Int
  month_lte: Int
  month_gt: Int
  month_gte: Int
  day: Int
  day_not: Int
  day_in: [Int!]
  day_not_in: [Int!]
  day_lt: Int
  day_lte: Int
  day_gt: Int
  day_gte: Int
  uniquecheck: String
  uniquecheck_not: String
  uniquecheck_in: [String!]
  uniquecheck_not_in: [String!]
  uniquecheck_lt: String
  uniquecheck_lte: String
  uniquecheck_gt: String
  uniquecheck_gte: String
  uniquecheck_contains: String
  uniquecheck_not_contains: String
  uniquecheck_starts_with: String
  uniquecheck_not_starts_with: String
  uniquecheck_ends_with: String
  uniquecheck_not_ends_with: String
  isOpen: Boolean
  isOpen_not: Boolean
  recurring: Boolean
  recurring_not: Boolean
  AND: [AvailabilityWhereInput!]
  OR: [AvailabilityWhereInput!]
  NOT: [AvailabilityWhereInput!]
}

input AvailabilityWhereUniqueInput {
  id: ID
  uniquecheck: String
}

type BatchPayload {
  count: Long!
}

type Booking {
  id: ID!
  year: Int!
  month: Int!
  day: Int!
  hour: Int!
  minute: Int!
  coach: String!
  seeker: String!
  uniquecheck: String!
  availability(where: AvailabilityWhereInput, orderBy: AvailabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Availability!]
  pending: Boolean
  confirmed: Boolean
  interviewGoals: String
  interviewQuestions: String
  resumeURL: String
  review: Review
  response: Response
  report: Report
  price: Int!
  date: DateTime!
}

type BookingConnection {
  pageInfo: PageInfo!
  edges: [BookingEdge]!
  aggregate: AggregateBooking!
}

input BookingCreateInput {
  id: ID
  year: Int!
  month: Int!
  day: Int!
  hour: Int!
  minute: Int!
  coach: String!
  seeker: String!
  uniquecheck: String!
  availability: AvailabilityCreateManyInput
  pending: Boolean
  confirmed: Boolean
  interviewGoals: String
  interviewQuestions: String
  resumeURL: String
  review: ReviewCreateOneWithoutBookingInput
  response: ResponseCreateOneWithoutBookingInput
  report: ReportCreateOneWithoutBookingInput
  price: Int!
  date: DateTime!
}

input BookingCreateOneWithoutReportInput {
  create: BookingCreateWithoutReportInput
  connect: BookingWhereUniqueInput
}

input BookingCreateOneWithoutResponseInput {
  create: BookingCreateWithoutResponseInput
  connect: BookingWhereUniqueInput
}

input BookingCreateOneWithoutReviewInput {
  create: BookingCreateWithoutReviewInput
  connect: BookingWhereUniqueInput
}

input BookingCreateWithoutReportInput {
  id: ID
  year: Int!
  month: Int!
  day: Int!
  hour: Int!
  minute: Int!
  coach: String!
  seeker: String!
  uniquecheck: String!
  availability: AvailabilityCreateManyInput
  pending: Boolean
  confirmed: Boolean
  interviewGoals: String
  interviewQuestions: String
  resumeURL: String
  review: ReviewCreateOneWithoutBookingInput
  response: ResponseCreateOneWithoutBookingInput
  price: Int!
  date: DateTime!
}

input BookingCreateWithoutResponseInput {
  id: ID
  year: Int!
  month: Int!
  day: Int!
  hour: Int!
  minute: Int!
  coach: String!
  seeker: String!
  uniquecheck: String!
  availability: AvailabilityCreateManyInput
  pending: Boolean
  confirmed: Boolean
  interviewGoals: String
  interviewQuestions: String
  resumeURL: String
  review: ReviewCreateOneWithoutBookingInput
  report: ReportCreateOneWithoutBookingInput
  price: Int!
  date: DateTime!
}

input BookingCreateWithoutReviewInput {
  id: ID
  year: Int!
  month: Int!
  day: Int!
  hour: Int!
  minute: Int!
  coach: String!
  seeker: String!
  uniquecheck: String!
  availability: AvailabilityCreateManyInput
  pending: Boolean
  confirmed: Boolean
  interviewGoals: String
  interviewQuestions: String
  resumeURL: String
  response: ResponseCreateOneWithoutBookingInput
  report: ReportCreateOneWithoutBookingInput
  price: Int!
  date: DateTime!
}

type BookingEdge {
  node: Booking!
  cursor: String!
}

enum BookingOrderByInput {
  id_ASC
  id_DESC
  year_ASC
  year_DESC
  month_ASC
  month_DESC
  day_ASC
  day_DESC
  hour_ASC
  hour_DESC
  minute_ASC
  minute_DESC
  coach_ASC
  coach_DESC
  seeker_ASC
  seeker_DESC
  uniquecheck_ASC
  uniquecheck_DESC
  pending_ASC
  pending_DESC
  confirmed_ASC
  confirmed_DESC
  interviewGoals_ASC
  interviewGoals_DESC
  interviewQuestions_ASC
  interviewQuestions_DESC
  resumeURL_ASC
  resumeURL_DESC
  price_ASC
  price_DESC
  date_ASC
  date_DESC
}

type BookingPreviousValues {
  id: ID!
  year: Int!
  month: Int!
  day: Int!
  hour: Int!
  minute: Int!
  coach: String!
  seeker: String!
  uniquecheck: String!
  pending: Boolean
  confirmed: Boolean
  interviewGoals: String
  interviewQuestions: String
  resumeURL: String
  price: Int!
  date: DateTime!
}

type BookingSubscriptionPayload {
  mutation: MutationType!
  node: Booking
  updatedFields: [String!]
  previousValues: BookingPreviousValues
}

input BookingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookingWhereInput
  AND: [BookingSubscriptionWhereInput!]
  OR: [BookingSubscriptionWhereInput!]
  NOT: [BookingSubscriptionWhereInput!]
}

input BookingUpdateInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  coach: String
  seeker: String
  uniquecheck: String
  availability: AvailabilityUpdateManyInput
  pending: Boolean
  confirmed: Boolean
  interviewGoals: String
  interviewQuestions: String
  resumeURL: String
  review: ReviewUpdateOneWithoutBookingInput
  response: ResponseUpdateOneWithoutBookingInput
  report: ReportUpdateOneWithoutBookingInput
  price: Int
  date: DateTime
}

input BookingUpdateManyMutationInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  coach: String
  seeker: String
  uniquecheck: String
  pending: Boolean
  confirmed: Boolean
  interviewGoals: String
  interviewQuestions: String
  resumeURL: String
  price: Int
  date: DateTime
}

input BookingUpdateOneRequiredWithoutReportInput {
  create: BookingCreateWithoutReportInput
  update: BookingUpdateWithoutReportDataInput
  upsert: BookingUpsertWithoutReportInput
  connect: BookingWhereUniqueInput
}

input BookingUpdateOneRequiredWithoutResponseInput {
  create: BookingCreateWithoutResponseInput
  update: BookingUpdateWithoutResponseDataInput
  upsert: BookingUpsertWithoutResponseInput
  connect: BookingWhereUniqueInput
}

input BookingUpdateOneRequiredWithoutReviewInput {
  create: BookingCreateWithoutReviewInput
  update: BookingUpdateWithoutReviewDataInput
  upsert: BookingUpsertWithoutReviewInput
  connect: BookingWhereUniqueInput
}

input BookingUpdateWithoutReportDataInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  coach: String
  seeker: String
  uniquecheck: String
  availability: AvailabilityUpdateManyInput
  pending: Boolean
  confirmed: Boolean
  interviewGoals: String
  interviewQuestions: String
  resumeURL: String
  review: ReviewUpdateOneWithoutBookingInput
  response: ResponseUpdateOneWithoutBookingInput
  price: Int
  date: DateTime
}

input BookingUpdateWithoutResponseDataInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  coach: String
  seeker: String
  uniquecheck: String
  availability: AvailabilityUpdateManyInput
  pending: Boolean
  confirmed: Boolean
  interviewGoals: String
  interviewQuestions: String
  resumeURL: String
  review: ReviewUpdateOneWithoutBookingInput
  report: ReportUpdateOneWithoutBookingInput
  price: Int
  date: DateTime
}

input BookingUpdateWithoutReviewDataInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  coach: String
  seeker: String
  uniquecheck: String
  availability: AvailabilityUpdateManyInput
  pending: Boolean
  confirmed: Boolean
  interviewGoals: String
  interviewQuestions: String
  resumeURL: String
  response: ResponseUpdateOneWithoutBookingInput
  report: ReportUpdateOneWithoutBookingInput
  price: Int
  date: DateTime
}

input BookingUpsertWithoutReportInput {
  update: BookingUpdateWithoutReportDataInput!
  create: BookingCreateWithoutReportInput!
}

input BookingUpsertWithoutResponseInput {
  update: BookingUpdateWithoutResponseDataInput!
  create: BookingCreateWithoutResponseInput!
}

input BookingUpsertWithoutReviewInput {
  update: BookingUpdateWithoutReviewDataInput!
  create: BookingCreateWithoutReviewInput!
}

input BookingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  year: Int
  year_not: Int
  year_in: [Int!]
  year_not_in: [Int!]
  year_lt: Int
  year_lte: Int
  year_gt: Int
  year_gte: Int
  month: Int
  month_not: Int
  month_in: [Int!]
  month_not_in: [Int!]
  month_lt: Int
  month_lte: Int
  month_gt: Int
  month_gte: Int
  day: Int
  day_not: Int
  day_in: [Int!]
  day_not_in: [Int!]
  day_lt: Int
  day_lte: Int
  day_gt: Int
  day_gte: Int
  hour: Int
  hour_not: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  hour_lt: Int
  hour_lte: Int
  hour_gt: Int
  hour_gte: Int
  minute: Int
  minute_not: Int
  minute_in: [Int!]
  minute_not_in: [Int!]
  minute_lt: Int
  minute_lte: Int
  minute_gt: Int
  minute_gte: Int
  coach: String
  coach_not: String
  coach_in: [String!]
  coach_not_in: [String!]
  coach_lt: String
  coach_lte: String
  coach_gt: String
  coach_gte: String
  coach_contains: String
  coach_not_contains: String
  coach_starts_with: String
  coach_not_starts_with: String
  coach_ends_with: String
  coach_not_ends_with: String
  seeker: String
  seeker_not: String
  seeker_in: [String!]
  seeker_not_in: [String!]
  seeker_lt: String
  seeker_lte: String
  seeker_gt: String
  seeker_gte: String
  seeker_contains: String
  seeker_not_contains: String
  seeker_starts_with: String
  seeker_not_starts_with: String
  seeker_ends_with: String
  seeker_not_ends_with: String
  uniquecheck: String
  uniquecheck_not: String
  uniquecheck_in: [String!]
  uniquecheck_not_in: [String!]
  uniquecheck_lt: String
  uniquecheck_lte: String
  uniquecheck_gt: String
  uniquecheck_gte: String
  uniquecheck_contains: String
  uniquecheck_not_contains: String
  uniquecheck_starts_with: String
  uniquecheck_not_starts_with: String
  uniquecheck_ends_with: String
  uniquecheck_not_ends_with: String
  availability_every: AvailabilityWhereInput
  availability_some: AvailabilityWhereInput
  availability_none: AvailabilityWhereInput
  pending: Boolean
  pending_not: Boolean
  confirmed: Boolean
  confirmed_not: Boolean
  interviewGoals: String
  interviewGoals_not: String
  interviewGoals_in: [String!]
  interviewGoals_not_in: [String!]
  interviewGoals_lt: String
  interviewGoals_lte: String
  interviewGoals_gt: String
  interviewGoals_gte: String
  interviewGoals_contains: String
  interviewGoals_not_contains: String
  interviewGoals_starts_with: String
  interviewGoals_not_starts_with: String
  interviewGoals_ends_with: String
  interviewGoals_not_ends_with: String
  interviewQuestions: String
  interviewQuestions_not: String
  interviewQuestions_in: [String!]
  interviewQuestions_not_in: [String!]
  interviewQuestions_lt: String
  interviewQuestions_lte: String
  interviewQuestions_gt: String
  interviewQuestions_gte: String
  interviewQuestions_contains: String
  interviewQuestions_not_contains: String
  interviewQuestions_starts_with: String
  interviewQuestions_not_starts_with: String
  interviewQuestions_ends_with: String
  interviewQuestions_not_ends_with: String
  resumeURL: String
  resumeURL_not: String
  resumeURL_in: [String!]
  resumeURL_not_in: [String!]
  resumeURL_lt: String
  resumeURL_lte: String
  resumeURL_gt: String
  resumeURL_gte: String
  resumeURL_contains: String
  resumeURL_not_contains: String
  resumeURL_starts_with: String
  resumeURL_not_starts_with: String
  resumeURL_ends_with: String
  resumeURL_not_ends_with: String
  review: ReviewWhereInput
  response: ResponseWhereInput
  report: ReportWhereInput
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
}

input BookingWhereUniqueInput {
  id: ID
  uniquecheck: String
}

scalar DateTime

type Industry {
  id: ID!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type IndustryConnection {
  pageInfo: PageInfo!
  edges: [IndustryEdge]!
  aggregate: AggregateIndustry!
}

input IndustryCreateInput {
  id: ID
  name: String!
  posts: PostCreateManyWithoutIndustryInput
}

input IndustryCreateOneWithoutPostsInput {
  create: IndustryCreateWithoutPostsInput
  connect: IndustryWhereUniqueInput
}

input IndustryCreateWithoutPostsInput {
  id: ID
  name: String!
}

type IndustryEdge {
  node: Industry!
  cursor: String!
}

enum IndustryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type IndustryPreviousValues {
  id: ID!
  name: String!
}

type IndustrySubscriptionPayload {
  mutation: MutationType!
  node: Industry
  updatedFields: [String!]
  previousValues: IndustryPreviousValues
}

input IndustrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IndustryWhereInput
  AND: [IndustrySubscriptionWhereInput!]
  OR: [IndustrySubscriptionWhereInput!]
  NOT: [IndustrySubscriptionWhereInput!]
}

input IndustryUpdateInput {
  name: String
  posts: PostUpdateManyWithoutIndustryInput
}

input IndustryUpdateManyMutationInput {
  name: String
}

input IndustryUpdateOneWithoutPostsInput {
  create: IndustryCreateWithoutPostsInput
  update: IndustryUpdateWithoutPostsDataInput
  upsert: IndustryUpsertWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  connect: IndustryWhereUniqueInput
}

input IndustryUpdateWithoutPostsDataInput {
  name: String
}

input IndustryUpsertWithoutPostsInput {
  update: IndustryUpdateWithoutPostsDataInput!
  create: IndustryCreateWithoutPostsInput!
}

input IndustryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [IndustryWhereInput!]
  OR: [IndustryWhereInput!]
  NOT: [IndustryWhereInput!]
}

input IndustryWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Mutation {
  createAvailability(data: AvailabilityCreateInput!): Availability!
  updateAvailability(data: AvailabilityUpdateInput!, where: AvailabilityWhereUniqueInput!): Availability
  updateManyAvailabilities(data: AvailabilityUpdateManyMutationInput!, where: AvailabilityWhereInput): BatchPayload!
  upsertAvailability(where: AvailabilityWhereUniqueInput!, create: AvailabilityCreateInput!, update: AvailabilityUpdateInput!): Availability!
  deleteAvailability(where: AvailabilityWhereUniqueInput!): Availability
  deleteManyAvailabilities(where: AvailabilityWhereInput): BatchPayload!
  createBooking(data: BookingCreateInput!): Booking!
  updateBooking(data: BookingUpdateInput!, where: BookingWhereUniqueInput!): Booking
  updateManyBookings(data: BookingUpdateManyMutationInput!, where: BookingWhereInput): BatchPayload!
  upsertBooking(where: BookingWhereUniqueInput!, create: BookingCreateInput!, update: BookingUpdateInput!): Booking!
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteManyBookings(where: BookingWhereInput): BatchPayload!
  createIndustry(data: IndustryCreateInput!): Industry!
  updateIndustry(data: IndustryUpdateInput!, where: IndustryWhereUniqueInput!): Industry
  updateManyIndustries(data: IndustryUpdateManyMutationInput!, where: IndustryWhereInput): BatchPayload!
  upsertIndustry(where: IndustryWhereUniqueInput!, create: IndustryCreateInput!, update: IndustryUpdateInput!): Industry!
  deleteIndustry(where: IndustryWhereUniqueInput!): Industry
  deleteManyIndustries(where: IndustryWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createReport(data: ReportCreateInput!): Report!
  updateReport(data: ReportUpdateInput!, where: ReportWhereUniqueInput!): Report
  updateManyReports(data: ReportUpdateManyMutationInput!, where: ReportWhereInput): BatchPayload!
  upsertReport(where: ReportWhereUniqueInput!, create: ReportCreateInput!, update: ReportUpdateInput!): Report!
  deleteReport(where: ReportWhereUniqueInput!): Report
  deleteManyReports(where: ReportWhereInput): BatchPayload!
  createResponse(data: ResponseCreateInput!): Response!
  updateResponse(data: ResponseUpdateInput!, where: ResponseWhereUniqueInput!): Response
  updateManyResponses(data: ResponseUpdateManyMutationInput!, where: ResponseWhereInput): BatchPayload!
  upsertResponse(where: ResponseWhereUniqueInput!, create: ResponseCreateInput!, update: ResponseUpdateInput!): Response!
  deleteResponse(where: ResponseWhereUniqueInput!): Response
  deleteManyResponses(where: ResponseWhereInput): BatchPayload!
  createReview(data: ReviewCreateInput!): Review!
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  price: Int
  position: String
  industry: Industry
  description: String
  coachID: String!
  createdAt: DateTime!
  lastUpdated: DateTime!
  company: String
  isPublished: Boolean!
  desc_lc: String
  company_lc: String
  position_lc: String
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  price: Int
  position: String
  industry: IndustryCreateOneWithoutPostsInput
  description: String
  coachID: String!
  company: String
  isPublished: Boolean
  desc_lc: String
  company_lc: String
  position_lc: String
  tags: TagCreateManyWithoutPostsInput
}

input PostCreateManyWithoutIndustryInput {
  create: [PostCreateWithoutIndustryInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutTagsInput {
  create: [PostCreateWithoutTagsInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutIndustryInput {
  id: ID
  price: Int
  position: String
  description: String
  coachID: String!
  company: String
  isPublished: Boolean
  desc_lc: String
  company_lc: String
  position_lc: String
  tags: TagCreateManyWithoutPostsInput
}

input PostCreateWithoutTagsInput {
  id: ID
  price: Int
  position: String
  industry: IndustryCreateOneWithoutPostsInput
  description: String
  coachID: String!
  company: String
  isPublished: Boolean
  desc_lc: String
  company_lc: String
  position_lc: String
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  position_ASC
  position_DESC
  description_ASC
  description_DESC
  coachID_ASC
  coachID_DESC
  createdAt_ASC
  createdAt_DESC
  lastUpdated_ASC
  lastUpdated_DESC
  company_ASC
  company_DESC
  isPublished_ASC
  isPublished_DESC
  desc_lc_ASC
  desc_lc_DESC
  company_lc_ASC
  company_lc_DESC
  position_lc_ASC
  position_lc_DESC
}

type PostPreviousValues {
  id: ID!
  price: Int
  position: String
  description: String
  coachID: String!
  createdAt: DateTime!
  lastUpdated: DateTime!
  company: String
  isPublished: Boolean!
  desc_lc: String
  company_lc: String
  position_lc: String
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  coachID: String
  coachID_not: String
  coachID_in: [String!]
  coachID_not_in: [String!]
  coachID_lt: String
  coachID_lte: String
  coachID_gt: String
  coachID_gte: String
  coachID_contains: String
  coachID_not_contains: String
  coachID_starts_with: String
  coachID_not_starts_with: String
  coachID_ends_with: String
  coachID_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  lastUpdated: DateTime
  lastUpdated_not: DateTime
  lastUpdated_in: [DateTime!]
  lastUpdated_not_in: [DateTime!]
  lastUpdated_lt: DateTime
  lastUpdated_lte: DateTime
  lastUpdated_gt: DateTime
  lastUpdated_gte: DateTime
  company: String
  company_not: String
  company_in: [String!]
  company_not_in: [String!]
  company_lt: String
  company_lte: String
  company_gt: String
  company_gte: String
  company_contains: String
  company_not_contains: String
  company_starts_with: String
  company_not_starts_with: String
  company_ends_with: String
  company_not_ends_with: String
  isPublished: Boolean
  isPublished_not: Boolean
  desc_lc: String
  desc_lc_not: String
  desc_lc_in: [String!]
  desc_lc_not_in: [String!]
  desc_lc_lt: String
  desc_lc_lte: String
  desc_lc_gt: String
  desc_lc_gte: String
  desc_lc_contains: String
  desc_lc_not_contains: String
  desc_lc_starts_with: String
  desc_lc_not_starts_with: String
  desc_lc_ends_with: String
  desc_lc_not_ends_with: String
  company_lc: String
  company_lc_not: String
  company_lc_in: [String!]
  company_lc_not_in: [String!]
  company_lc_lt: String
  company_lc_lte: String
  company_lc_gt: String
  company_lc_gte: String
  company_lc_contains: String
  company_lc_not_contains: String
  company_lc_starts_with: String
  company_lc_not_starts_with: String
  company_lc_ends_with: String
  company_lc_not_ends_with: String
  position_lc: String
  position_lc_not: String
  position_lc_in: [String!]
  position_lc_not_in: [String!]
  position_lc_lt: String
  position_lc_lte: String
  position_lc_gt: String
  position_lc_gte: String
  position_lc_contains: String
  position_lc_not_contains: String
  position_lc_starts_with: String
  position_lc_not_starts_with: String
  position_lc_ends_with: String
  position_lc_not_ends_with: String
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  price: Int
  position: String
  industry: IndustryUpdateOneWithoutPostsInput
  description: String
  coachID: String
  company: String
  isPublished: Boolean
  desc_lc: String
  company_lc: String
  position_lc: String
  tags: TagUpdateManyWithoutPostsInput
}

input PostUpdateManyDataInput {
  price: Int
  position: String
  description: String
  coachID: String
  company: String
  isPublished: Boolean
  desc_lc: String
  company_lc: String
  position_lc: String
}

input PostUpdateManyMutationInput {
  price: Int
  position: String
  description: String
  coachID: String
  company: String
  isPublished: Boolean
  desc_lc: String
  company_lc: String
  position_lc: String
}

input PostUpdateManyWithoutIndustryInput {
  create: [PostCreateWithoutIndustryInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutIndustryInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutIndustryInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutTagsInput {
  create: [PostCreateWithoutTagsInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutIndustryDataInput {
  price: Int
  position: String
  description: String
  coachID: String
  company: String
  isPublished: Boolean
  desc_lc: String
  company_lc: String
  position_lc: String
  tags: TagUpdateManyWithoutPostsInput
}

input PostUpdateWithoutTagsDataInput {
  price: Int
  position: String
  industry: IndustryUpdateOneWithoutPostsInput
  description: String
  coachID: String
  company: String
  isPublished: Boolean
  desc_lc: String
  company_lc: String
  position_lc: String
}

input PostUpdateWithWhereUniqueWithoutIndustryInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutIndustryDataInput!
}

input PostUpdateWithWhereUniqueWithoutTagsInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutTagsDataInput!
}

input PostUpsertWithWhereUniqueWithoutIndustryInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutIndustryDataInput!
  create: PostCreateWithoutIndustryInput!
}

input PostUpsertWithWhereUniqueWithoutTagsInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutTagsDataInput!
  create: PostCreateWithoutTagsInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  industry: IndustryWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  coachID: String
  coachID_not: String
  coachID_in: [String!]
  coachID_not_in: [String!]
  coachID_lt: String
  coachID_lte: String
  coachID_gt: String
  coachID_gte: String
  coachID_contains: String
  coachID_not_contains: String
  coachID_starts_with: String
  coachID_not_starts_with: String
  coachID_ends_with: String
  coachID_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  lastUpdated: DateTime
  lastUpdated_not: DateTime
  lastUpdated_in: [DateTime!]
  lastUpdated_not_in: [DateTime!]
  lastUpdated_lt: DateTime
  lastUpdated_lte: DateTime
  lastUpdated_gt: DateTime
  lastUpdated_gte: DateTime
  company: String
  company_not: String
  company_in: [String!]
  company_not_in: [String!]
  company_lt: String
  company_lte: String
  company_gt: String
  company_gte: String
  company_contains: String
  company_not_contains: String
  company_starts_with: String
  company_not_starts_with: String
  company_ends_with: String
  company_not_ends_with: String
  isPublished: Boolean
  isPublished_not: Boolean
  desc_lc: String
  desc_lc_not: String
  desc_lc_in: [String!]
  desc_lc_not_in: [String!]
  desc_lc_lt: String
  desc_lc_lte: String
  desc_lc_gt: String
  desc_lc_gte: String
  desc_lc_contains: String
  desc_lc_not_contains: String
  desc_lc_starts_with: String
  desc_lc_not_starts_with: String
  desc_lc_ends_with: String
  desc_lc_not_ends_with: String
  company_lc: String
  company_lc_not: String
  company_lc_in: [String!]
  company_lc_not_in: [String!]
  company_lc_lt: String
  company_lc_lte: String
  company_lc_gt: String
  company_lc_gte: String
  company_lc_contains: String
  company_lc_not_contains: String
  company_lc_starts_with: String
  company_lc_not_starts_with: String
  company_lc_ends_with: String
  company_lc_not_ends_with: String
  position_lc: String
  position_lc_not: String
  position_lc_in: [String!]
  position_lc_not_in: [String!]
  position_lc_lt: String
  position_lc_lte: String
  position_lc_gt: String
  position_lc_gte: String
  position_lc_contains: String
  position_lc_not_contains: String
  position_lc_starts_with: String
  position_lc_not_starts_with: String
  position_lc_ends_with: String
  position_lc_not_ends_with: String
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
  coachID: String
}

type Query {
  availability(where: AvailabilityWhereUniqueInput!): Availability
  availabilities(where: AvailabilityWhereInput, orderBy: AvailabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Availability]!
  availabilitiesConnection(where: AvailabilityWhereInput, orderBy: AvailabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AvailabilityConnection!
  booking(where: BookingWhereUniqueInput!): Booking
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking]!
  bookingsConnection(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookingConnection!
  industry(where: IndustryWhereUniqueInput!): Industry
  industries(where: IndustryWhereInput, orderBy: IndustryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Industry]!
  industriesConnection(where: IndustryWhereInput, orderBy: IndustryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IndustryConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  report(where: ReportWhereUniqueInput!): Report
  reports(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Report]!
  reportsConnection(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReportConnection!
  response(where: ResponseWhereUniqueInput!): Response
  responses(where: ResponseWhereInput, orderBy: ResponseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Response]!
  responsesConnection(where: ResponseWhereInput, orderBy: ResponseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResponseConnection!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  node(id: ID!): Node
}

type Report {
  id: ID!
  coach: String!
  seeker: String!
  booking: Booking!
  strengths: String!
  growthAreas: String!
  suggestions: String!
  additionalComments: String
  createdAt: DateTime!
  isSent: Boolean
}

type ReportConnection {
  pageInfo: PageInfo!
  edges: [ReportEdge]!
  aggregate: AggregateReport!
}

input ReportCreateInput {
  id: ID
  coach: String!
  seeker: String!
  booking: BookingCreateOneWithoutReportInput!
  strengths: String!
  growthAreas: String!
  suggestions: String!
  additionalComments: String
  isSent: Boolean
}

input ReportCreateOneWithoutBookingInput {
  create: ReportCreateWithoutBookingInput
  connect: ReportWhereUniqueInput
}

input ReportCreateWithoutBookingInput {
  id: ID
  coach: String!
  seeker: String!
  strengths: String!
  growthAreas: String!
  suggestions: String!
  additionalComments: String
  isSent: Boolean
}

type ReportEdge {
  node: Report!
  cursor: String!
}

enum ReportOrderByInput {
  id_ASC
  id_DESC
  coach_ASC
  coach_DESC
  seeker_ASC
  seeker_DESC
  strengths_ASC
  strengths_DESC
  growthAreas_ASC
  growthAreas_DESC
  suggestions_ASC
  suggestions_DESC
  additionalComments_ASC
  additionalComments_DESC
  createdAt_ASC
  createdAt_DESC
  isSent_ASC
  isSent_DESC
}

type ReportPreviousValues {
  id: ID!
  coach: String!
  seeker: String!
  strengths: String!
  growthAreas: String!
  suggestions: String!
  additionalComments: String
  createdAt: DateTime!
  isSent: Boolean
}

type ReportSubscriptionPayload {
  mutation: MutationType!
  node: Report
  updatedFields: [String!]
  previousValues: ReportPreviousValues
}

input ReportSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReportWhereInput
  AND: [ReportSubscriptionWhereInput!]
  OR: [ReportSubscriptionWhereInput!]
  NOT: [ReportSubscriptionWhereInput!]
}

input ReportUpdateInput {
  coach: String
  seeker: String
  booking: BookingUpdateOneRequiredWithoutReportInput
  strengths: String
  growthAreas: String
  suggestions: String
  additionalComments: String
  isSent: Boolean
}

input ReportUpdateManyMutationInput {
  coach: String
  seeker: String
  strengths: String
  growthAreas: String
  suggestions: String
  additionalComments: String
  isSent: Boolean
}

input ReportUpdateOneWithoutBookingInput {
  create: ReportCreateWithoutBookingInput
  update: ReportUpdateWithoutBookingDataInput
  upsert: ReportUpsertWithoutBookingInput
  delete: Boolean
  disconnect: Boolean
  connect: ReportWhereUniqueInput
}

input ReportUpdateWithoutBookingDataInput {
  coach: String
  seeker: String
  strengths: String
  growthAreas: String
  suggestions: String
  additionalComments: String
  isSent: Boolean
}

input ReportUpsertWithoutBookingInput {
  update: ReportUpdateWithoutBookingDataInput!
  create: ReportCreateWithoutBookingInput!
}

input ReportWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coach: String
  coach_not: String
  coach_in: [String!]
  coach_not_in: [String!]
  coach_lt: String
  coach_lte: String
  coach_gt: String
  coach_gte: String
  coach_contains: String
  coach_not_contains: String
  coach_starts_with: String
  coach_not_starts_with: String
  coach_ends_with: String
  coach_not_ends_with: String
  seeker: String
  seeker_not: String
  seeker_in: [String!]
  seeker_not_in: [String!]
  seeker_lt: String
  seeker_lte: String
  seeker_gt: String
  seeker_gte: String
  seeker_contains: String
  seeker_not_contains: String
  seeker_starts_with: String
  seeker_not_starts_with: String
  seeker_ends_with: String
  seeker_not_ends_with: String
  booking: BookingWhereInput
  strengths: String
  strengths_not: String
  strengths_in: [String!]
  strengths_not_in: [String!]
  strengths_lt: String
  strengths_lte: String
  strengths_gt: String
  strengths_gte: String
  strengths_contains: String
  strengths_not_contains: String
  strengths_starts_with: String
  strengths_not_starts_with: String
  strengths_ends_with: String
  strengths_not_ends_with: String
  growthAreas: String
  growthAreas_not: String
  growthAreas_in: [String!]
  growthAreas_not_in: [String!]
  growthAreas_lt: String
  growthAreas_lte: String
  growthAreas_gt: String
  growthAreas_gte: String
  growthAreas_contains: String
  growthAreas_not_contains: String
  growthAreas_starts_with: String
  growthAreas_not_starts_with: String
  growthAreas_ends_with: String
  growthAreas_not_ends_with: String
  suggestions: String
  suggestions_not: String
  suggestions_in: [String!]
  suggestions_not_in: [String!]
  suggestions_lt: String
  suggestions_lte: String
  suggestions_gt: String
  suggestions_gte: String
  suggestions_contains: String
  suggestions_not_contains: String
  suggestions_starts_with: String
  suggestions_not_starts_with: String
  suggestions_ends_with: String
  suggestions_not_ends_with: String
  additionalComments: String
  additionalComments_not: String
  additionalComments_in: [String!]
  additionalComments_not_in: [String!]
  additionalComments_lt: String
  additionalComments_lte: String
  additionalComments_gt: String
  additionalComments_gte: String
  additionalComments_contains: String
  additionalComments_not_contains: String
  additionalComments_starts_with: String
  additionalComments_not_starts_with: String
  additionalComments_ends_with: String
  additionalComments_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  isSent: Boolean
  isSent_not: Boolean
  AND: [ReportWhereInput!]
  OR: [ReportWhereInput!]
  NOT: [ReportWhereInput!]
}

input ReportWhereUniqueInput {
  id: ID
}

type Response {
  id: ID!
  review: Review!
  text: String!
  createdAt: DateTime!
  lastUpdated: DateTime!
  booking: Booking!
}

type ResponseConnection {
  pageInfo: PageInfo!
  edges: [ResponseEdge]!
  aggregate: AggregateResponse!
}

input ResponseCreateInput {
  id: ID
  review: ReviewCreateOneWithoutResponseInput!
  text: String!
  booking: BookingCreateOneWithoutResponseInput!
}

input ResponseCreateOneWithoutBookingInput {
  create: ResponseCreateWithoutBookingInput
  connect: ResponseWhereUniqueInput
}

input ResponseCreateOneWithoutReviewInput {
  create: ResponseCreateWithoutReviewInput
  connect: ResponseWhereUniqueInput
}

input ResponseCreateWithoutBookingInput {
  id: ID
  review: ReviewCreateOneWithoutResponseInput!
  text: String!
}

input ResponseCreateWithoutReviewInput {
  id: ID
  text: String!
  booking: BookingCreateOneWithoutResponseInput!
}

type ResponseEdge {
  node: Response!
  cursor: String!
}

enum ResponseOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  lastUpdated_ASC
  lastUpdated_DESC
}

type ResponsePreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  lastUpdated: DateTime!
}

type ResponseSubscriptionPayload {
  mutation: MutationType!
  node: Response
  updatedFields: [String!]
  previousValues: ResponsePreviousValues
}

input ResponseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResponseWhereInput
  AND: [ResponseSubscriptionWhereInput!]
  OR: [ResponseSubscriptionWhereInput!]
  NOT: [ResponseSubscriptionWhereInput!]
}

input ResponseUpdateInput {
  review: ReviewUpdateOneRequiredWithoutResponseInput
  text: String
  booking: BookingUpdateOneRequiredWithoutResponseInput
}

input ResponseUpdateManyMutationInput {
  text: String
}

input ResponseUpdateOneWithoutBookingInput {
  create: ResponseCreateWithoutBookingInput
  update: ResponseUpdateWithoutBookingDataInput
  upsert: ResponseUpsertWithoutBookingInput
  delete: Boolean
  disconnect: Boolean
  connect: ResponseWhereUniqueInput
}

input ResponseUpdateOneWithoutReviewInput {
  create: ResponseCreateWithoutReviewInput
  update: ResponseUpdateWithoutReviewDataInput
  upsert: ResponseUpsertWithoutReviewInput
  delete: Boolean
  disconnect: Boolean
  connect: ResponseWhereUniqueInput
}

input ResponseUpdateWithoutBookingDataInput {
  review: ReviewUpdateOneRequiredWithoutResponseInput
  text: String
}

input ResponseUpdateWithoutReviewDataInput {
  text: String
  booking: BookingUpdateOneRequiredWithoutResponseInput
}

input ResponseUpsertWithoutBookingInput {
  update: ResponseUpdateWithoutBookingDataInput!
  create: ResponseCreateWithoutBookingInput!
}

input ResponseUpsertWithoutReviewInput {
  update: ResponseUpdateWithoutReviewDataInput!
  create: ResponseCreateWithoutReviewInput!
}

input ResponseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  review: ReviewWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  lastUpdated: DateTime
  lastUpdated_not: DateTime
  lastUpdated_in: [DateTime!]
  lastUpdated_not_in: [DateTime!]
  lastUpdated_lt: DateTime
  lastUpdated_lte: DateTime
  lastUpdated_gt: DateTime
  lastUpdated_gte: DateTime
  booking: BookingWhereInput
  AND: [ResponseWhereInput!]
  OR: [ResponseWhereInput!]
  NOT: [ResponseWhereInput!]
}

input ResponseWhereUniqueInput {
  id: ID
}

type Review {
  id: ID!
  coach: String!
  seeker: String!
  booking: Booking!
  rating: Int!
  review: String
  createdAt: DateTime!
  lastUpdated: DateTime!
  response: Response
}

type ReviewConnection {
  pageInfo: PageInfo!
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  id: ID
  coach: String!
  seeker: String!
  booking: BookingCreateOneWithoutReviewInput!
  rating: Int!
  review: String
  response: ResponseCreateOneWithoutReviewInput
}

input ReviewCreateOneWithoutBookingInput {
  create: ReviewCreateWithoutBookingInput
  connect: ReviewWhereUniqueInput
}

input ReviewCreateOneWithoutResponseInput {
  create: ReviewCreateWithoutResponseInput
  connect: ReviewWhereUniqueInput
}

input ReviewCreateWithoutBookingInput {
  id: ID
  coach: String!
  seeker: String!
  rating: Int!
  review: String
  response: ResponseCreateOneWithoutReviewInput
}

input ReviewCreateWithoutResponseInput {
  id: ID
  coach: String!
  seeker: String!
  booking: BookingCreateOneWithoutReviewInput!
  rating: Int!
  review: String
}

type ReviewEdge {
  node: Review!
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  coach_ASC
  coach_DESC
  seeker_ASC
  seeker_DESC
  rating_ASC
  rating_DESC
  review_ASC
  review_DESC
  createdAt_ASC
  createdAt_DESC
  lastUpdated_ASC
  lastUpdated_DESC
}

type ReviewPreviousValues {
  id: ID!
  coach: String!
  seeker: String!
  rating: Int!
  review: String
  createdAt: DateTime!
  lastUpdated: DateTime!
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
  AND: [ReviewSubscriptionWhereInput!]
  OR: [ReviewSubscriptionWhereInput!]
  NOT: [ReviewSubscriptionWhereInput!]
}

input ReviewUpdateInput {
  coach: String
  seeker: String
  booking: BookingUpdateOneRequiredWithoutReviewInput
  rating: Int
  review: String
  response: ResponseUpdateOneWithoutReviewInput
}

input ReviewUpdateManyMutationInput {
  coach: String
  seeker: String
  rating: Int
  review: String
}

input ReviewUpdateOneRequiredWithoutResponseInput {
  create: ReviewCreateWithoutResponseInput
  update: ReviewUpdateWithoutResponseDataInput
  upsert: ReviewUpsertWithoutResponseInput
  connect: ReviewWhereUniqueInput
}

input ReviewUpdateOneWithoutBookingInput {
  create: ReviewCreateWithoutBookingInput
  update: ReviewUpdateWithoutBookingDataInput
  upsert: ReviewUpsertWithoutBookingInput
  delete: Boolean
  disconnect: Boolean
  connect: ReviewWhereUniqueInput
}

input ReviewUpdateWithoutBookingDataInput {
  coach: String
  seeker: String
  rating: Int
  review: String
  response: ResponseUpdateOneWithoutReviewInput
}

input ReviewUpdateWithoutResponseDataInput {
  coach: String
  seeker: String
  booking: BookingUpdateOneRequiredWithoutReviewInput
  rating: Int
  review: String
}

input ReviewUpsertWithoutBookingInput {
  update: ReviewUpdateWithoutBookingDataInput!
  create: ReviewCreateWithoutBookingInput!
}

input ReviewUpsertWithoutResponseInput {
  update: ReviewUpdateWithoutResponseDataInput!
  create: ReviewCreateWithoutResponseInput!
}

input ReviewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  coach: String
  coach_not: String
  coach_in: [String!]
  coach_not_in: [String!]
  coach_lt: String
  coach_lte: String
  coach_gt: String
  coach_gte: String
  coach_contains: String
  coach_not_contains: String
  coach_starts_with: String
  coach_not_starts_with: String
  coach_ends_with: String
  coach_not_ends_with: String
  seeker: String
  seeker_not: String
  seeker_in: [String!]
  seeker_not_in: [String!]
  seeker_lt: String
  seeker_lte: String
  seeker_gt: String
  seeker_gte: String
  seeker_contains: String
  seeker_not_contains: String
  seeker_starts_with: String
  seeker_not_starts_with: String
  seeker_ends_with: String
  seeker_not_ends_with: String
  booking: BookingWhereInput
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  review: String
  review_not: String
  review_in: [String!]
  review_not_in: [String!]
  review_lt: String
  review_lte: String
  review_gt: String
  review_gte: String
  review_contains: String
  review_not_contains: String
  review_starts_with: String
  review_not_starts_with: String
  review_ends_with: String
  review_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  lastUpdated: DateTime
  lastUpdated_not: DateTime
  lastUpdated_in: [DateTime!]
  lastUpdated_not_in: [DateTime!]
  lastUpdated_lt: DateTime
  lastUpdated_lte: DateTime
  lastUpdated_gt: DateTime
  lastUpdated_gte: DateTime
  response: ResponseWhereInput
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
}

input ReviewWhereUniqueInput {
  id: ID
}

type Subscription {
  availability(where: AvailabilitySubscriptionWhereInput): AvailabilitySubscriptionPayload
  booking(where: BookingSubscriptionWhereInput): BookingSubscriptionPayload
  industry(where: IndustrySubscriptionWhereInput): IndustrySubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  report(where: ReportSubscriptionWhereInput): ReportSubscriptionPayload
  response(where: ResponseSubscriptionWhereInput): ResponseSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
}

type Tag {
  id: ID!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  name: String!
  posts: PostCreateManyWithoutTagsInput
}

input TagCreateManyWithoutPostsInput {
  create: [TagCreateWithoutPostsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutPostsInput {
  id: ID
  name: String!
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type TagPreviousValues {
  id: ID!
  name: String!
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateInput {
  name: String
  posts: PostUpdateManyWithoutTagsInput
}

input TagUpdateManyDataInput {
  name: String
}

input TagUpdateManyMutationInput {
  name: String
}

input TagUpdateManyWithoutPostsInput {
  create: [TagCreateWithoutPostsInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutPostsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutPostsInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithoutPostsDataInput {
  name: String
}

input TagUpdateWithWhereUniqueWithoutPostsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutPostsDataInput!
}

input TagUpsertWithWhereUniqueWithoutPostsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutPostsDataInput!
  create: TagCreateWithoutPostsInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
  name: String
}
`
      }
    